/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sharpie.grindsim.main;

import sharpie.grindsim.agents.*;
import sharpie.grindsim.config.UntilPlaytimeConfig;
import sharpie.grindsim.routes.fullroutes.HypermodernBastionFull;
import sharpie.grindsim.routes.netherexitroutes.*;
import sharpie.grindsim.routes.testroutes.TestCustomJsonRoute;
import sharpie.grindsim.routes.testroutes.TestEndFightRoute;
import sharpie.grindsim.routes.testroutes.TestNetherTravelRoute;
import sharpie.grindsim.routes.testroutes.TestPostEntryRoute;
import sharpie.grindsim.utils.Settings;
import sharpie.grindsim.config.SimConfig;
import sharpie.grindsim.sim.GrindSimulator;
import sharpie.sim.config.UntilAttemptsConfig;

import static sharpie.grindsim.splits.SplitUtils.getSplitLengthFromTimeString;

public class RunGrindSim {

    public static void main(String[] args) {

        Settings.initialize();

//        runPosposumentSim();

//        runEndFightSim();

//        runFullRouteSimUntilTime();

//        runTestPostEntrySim();

        runCustomJsonSim();
//        getSplitLengthFromTimeString("00:00:01.000");
    }

    /**
     * Demo for an example sim based on json split information
     */
    private static void runCustomJsonSim() {

        GrindSimulator grindSimulator = new GrindSimulator();

        int attempts = 100_000;

        SimConfig config = new UntilAttemptsConfig(attempts);

        config.routeToRun = new TestCustomJsonRoute();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

        System.out.println(config.getResults().showSuccessTimePercentiles());
    }

    /**
     * TODO @sharpieman20
     *
     * Make this generate statistics for all the blind travel agents
     * percentile curves
     */
    private static void runBlindTravelSim() {

        GrindSimulator grindSimulator = new GrindSimulator();

        int attempts = 1_000_000;

        SimConfig config = new UntilAttemptsConfig(attempts);

        config.routeToRun = new TestNetherTravelRoute();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

        System.out.println(config.getResults().showSuccessTimePercentiles());
    }

    /**
     * Simple end fight tester
     */
    private static void runEndFightSim() {

        GrindSimulator grindSimulator = new GrindSimulator();

        int attempts = 10_000;

        SimConfig config = new UntilAttemptsConfig(attempts);

        config.routeToRun = new TestEndFightRoute();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

        System.out.println(config.getResults().showSuccessTimePercentiles());
    }

    /**
     * Full run sim
     */
    private static void runFullRouteSim() {

        GrindSimulator grindSimulator = new GrindSimulator();

        int attempts = 1_000_000;

        SimConfig config = new UntilAttemptsConfig(attempts);

        config.routeToRun = new HypermodernBastionFull();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());
    }


    /**
     * Post entry sim
     */
    private static void runTestPostEntrySim() {

        GrindSimulator grindSimulator = new GrindSimulator();

        int attempts = 1_000_000;

        SimConfig config = new UntilAttemptsConfig(attempts);

        config.routeToRun = new TestPostEntryRoute();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());
    }


    /**
     * Full run sim
     */
    private static void runFullRouteSimUntilTime() {

        GrindSimulator grindSimulator = new GrindSimulator();

        double hours = 100_000;

        SimConfig config = new UntilPlaytimeConfig(hours);

        config.routeToRun = new HypermodernBastionFull();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());
    }

    private static void runPosposumentSim() {

        GrindSimulator grindSimulator = new GrindSimulator();

        int attempts = 5_000_000;

        SimConfig config = new UntilAttemptsConfig(attempts);

        MonumentResetAgent agent = new MonumentForcer();

        config.routeToRun = new PosposumentRoute(agent);

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

        agent = new RDResetAgent(24);

        config.routeToRun = new PosposumentRoute(agent);

        grindSimulator.runSim(config);

        agent = new CoordRDResetAgent(24);

        config.routeToRun = new PosposumentRoute(agent);

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

//        agent = new CoordRDResetAgent(18);
        agent = new RDResetAgent(18);

        config.routeToRun = new PosposumentRoute(agent);

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

        agent = new CoordRDResetAgent(14);

        config.routeToRun = new PosposumentRoute(agent);

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

        agent = new AggressiveCoordRDResetAgent(14);

        config.routeToRun = new PosposumentRoute(agent);

        grindSimulator.runSim(config);

        System.out.println(config.getResults());
    }

    private static void oldMain() {

        GrindSimulator grindSimulator = new GrindSimulator();

//        int attempts = 50_000_000;

        int attempts = 5_000_000;

//        int attempts = 500_000;

        SimConfig config = new UntilAttemptsConfig(attempts);

        config.routeToRun = new SimpleMonumentRoute(15);

//        config.routeToRun = new ResetForMonumentRuinedPortal(15, 7);

//        config.routeToRun = new HypermodernBastion();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

        config.routeToRun = new HypermodernBastion();

        grindSimulator.runSim(config);

        System.out.println(config.getResults());


        config.routeToRun = new ResetForMonumentBuriedTreasure(15, 9);

        grindSimulator.runSim(config);

        System.out.println(config.getResults());

//        System.out.println(config.getResults());
    }
}
